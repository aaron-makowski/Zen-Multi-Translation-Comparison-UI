// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name         String?
  email        String   @unique
  emailVerified DateTime?
  image        String?
  username     String   @unique
  password     String
  isGuest      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  favorites Favorite[]
  notes     Note[]
  comments  Comment[]
  accounts  Account[]
  sessions  Session[]
}

model Book {
  id          String   @id @default(cuid())
  title       String
  description String
  author      String?
  coverImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  verses    Verse[]
  favorites Favorite[]
}

model Verse {
  id        String   @id @default(cuid())
  number    Int
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  translations Translation[]
  notes        Note[]
  comments     Comment[]
}

model Translation {
  id           String   @id @default(cuid())
  text         String
  translator   String
  language     String   @default("English")
  verseId      String
  verse        Verse    @relation(fields: [verseId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  wordMappings WordMapping[]
}

model WordMapping {
  id            String      @id @default(cuid())
  originalWord  String
  translatedWord String
  position      Int
  translationId String
  translation   Translation @relation(fields: [translationId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  verseId   String
  verse     Verse    @relation(fields: [verseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  verseId   String
  verse     Verse    @relation(fields: [verseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
