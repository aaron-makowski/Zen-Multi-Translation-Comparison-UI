// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  isGuest   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  favorites Favorite[]
  notes     Note[]
  comments  Comment[]
}

model Book {
  id          String   @id @default(cuid())
  title       String
  description String
  author      String?
  coverImage  String?
  pdfPath     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  verses    Verse[]
  favorites Favorite[]
}

model Verse {
  id        String   @id @default(cuid())
  number    Int
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  translations Translation[]
  notes        Note[]
  comments     Comment[]
}

model Translation {
  id           String   @id @default(cuid())
  text         String
  translator   String
  language     String   @default("English")
  verseId      String
  verse        Verse    @relation(fields: [verseId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  wordMappings WordMapping[]
}

model WordMapping {
  id            String      @id @default(cuid())
  originalWord  String
  translatedWord String
  position      Int
  translationId String
  translation   Translation @relation(fields: [translationId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  verseId   String
  verse     Verse    @relation(fields: [verseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  verseId   String
  verse     Verse    @relation(fields: [verseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
