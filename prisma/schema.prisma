// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String   @map("username") @unique
  password  String
  avatar    String?
  bio       String?
  isGuest   Boolean  @default(false)
<<<<<<< HEAD
  commentKarma   Int @default(0)
  highlightKarma Int @default(0)
=======
  role      String   @default("user")
>>>>>>> origin/codex/protect-admin-routes-with-middleware
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
<<<<<<< HEAD
=======
  karma     Int      @default(0)
  streak    Int      @default(0)
  lastActive DateTime @default(now())
>>>>>>> origin/codex/track-karma-points-for-comments

  favorites Favorite[]
  notes     Note[]
  comments  Comment[]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  flags     Flag[]
  auditLogs AuditLog[]
=======
  followers Follow[] @relation("followers")
  following Follow[] @relation("following")
>>>>>>> origin/codex/add-user-profile-page-with-follow-feature
=======
  notifications Notification[]
>>>>>>> origin/codex/add-notifications-table-and-handlers
=======
  accounts  Account[]
  sessions  Session[]

  @@map("users")
>>>>>>> origin/codex/implement-auth-routes-and-features
}

model Book {
  id          String   @id @default(cuid())
  title       String
  description String
  author      String?
  coverImage  String?
  pdfPath     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  verses    Verse[]
  favorites Favorite[]
}

model Verse {
  id        String   @id @default(cuid())
  number    Int
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  translations Translation[]
  notes        Note[]
  comments     Comment[]
}

model Translation {
  id           String   @id @default(cuid())
  text         String
  translator   String
  language     String   @default("English")
  verseId      String
  verse        Verse    @relation(fields: [verseId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  wordMappings WordMapping[]
}

model Translator {
  id             String   @id @default(cuid())
  name           String
  translatorBio  String?
  publicationYear Int?
  license        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model WordMapping {
  id            String      @id @default(cuid())
  originalWord  String
  translatedWord String
  position      Int
  translationId String
  translation   Translation @relation(fields: [translationId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  verseId   String
  verse     Verse    @relation(fields: [verseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  verseId   String
  verse     Verse    @relation(fields: [verseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  flags     Flag[]
}

model Flag {
  id        String   @id @default(cuid())
  commentId String
<<<<<<< HEAD
  comment   Comment @relation(fields: [commentId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
=======
  comment   Comment  @relation(fields: [commentId], references: [id])
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
>>>>>>> origin/codex/protect-admin-routes-with-middleware
  reason    String?
  createdAt DateTime @default(now())
}

model AuditLog {
<<<<<<< HEAD
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  targetType String
  targetId  String
  createdAt DateTime @default(now())
}

model UserFollow {
  follower   User   @relation("following", fields: [followerId], references: [id])
  followerId String
  following  User   @relation("followers", fields: [followingId], references: [id])
  followingId String
  createdAt  DateTime @default(now())

  @@id([followerId, followingId])
=======
  id         String   @id @default(cuid())
  action     String
  targetType String
  targetId   String
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
>>>>>>> origin/codex/protect-admin-routes-with-middleware
}

model VerseView {
  id            String       @id @default(cuid())
  userId        String?
  user          User?        @relation(fields: [userId], references: [id])
  verseId       String
  verse         Verse        @relation(fields: [verseId], references: [id])
  translationId String?
  translation   Translation? @relation(fields: [translationId], references: [id])
  viewedAt      DateTime     @default(now())
}

model Follow {
  followerId String
  followingId String
  follower   User @relation("following", fields: [followerId], references: [id])
  following  User @relation("followers", fields: [followingId], references: [id])
  createdAt  DateTime @default(now())

  @@id([followerId, followingId])
}

model Notification {
  id        String            @id @default(cuid())
  type      NotificationType
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  data      Json?
  read      Boolean           @default(false)
  createdAt DateTime          @default(now())
}

enum NotificationType {
  reply
  mention
}

model Session {
<<<<<<< HEAD
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
=======
  sessionToken String   @id @map("id")
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime @map("expiresAt")
  createdAt    DateTime @default(now())

  @@map("sessions")
}

model Account {
  id                String   @id @default(cuid())
>>>>>>> origin/codex/implement-auth-routes-and-features
  userId            String
  type              String
  provider          String
  providerAccountId String
<<<<<<< HEAD
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  createdAt DateTime @default(now())
=======
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
>>>>>>> origin/codex/implement-auth-routes-and-features
}
